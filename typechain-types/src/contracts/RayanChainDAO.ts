/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RayanChainDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_RISK_SCORE"
      | "accControl"
      | "approvalThresholdPercentage"
      | "createFundingProposal"
      | "createTreasuryActionProposal"
      | "executeProposal"
      | "financeContract"
      | "hasVoted"
      | "nextProposalId"
      | "owner"
      | "participationScores"
      | "proposals"
      | "quorumPercentage"
      | "releaseNextMilestone"
      | "renounceOwnership"
      | "setStartupAccessTokenAddress"
      | "stakingContract"
      | "startupAccessTokenAddress"
      | "tallyVotes"
      | "transferOwnership"
      | "updateParticipationScore"
      | "updateProposalRiskScore"
      | "vote"
      | "votingPeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MilestoneReleased"
      | "OwnershipTransferred"
      | "ParticipationScoreUpdated"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "ProposalStateChanged"
      | "Voted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_RISK_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvalThresholdPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFundingProposal",
    values: [BytesLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTreasuryActionProposal",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "financeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participationScores",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseNextMilestone",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStartupAccessTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startupAccessTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParticipationScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposalRiskScore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_RISK_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accControl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvalThresholdPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFundingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTreasuryActionProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "financeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participationScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseNextMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartupAccessTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startupAccessTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParticipationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProposalRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
}

export namespace MilestoneReleasedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    milestoneIndex: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    milestoneIndex: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    milestoneIndex: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipationScoreUpdatedEvent {
  export type InputTuple = [user: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [user: string, newScore: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    pType: BigNumberish,
    descriptionHash: BytesLike
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    pType: bigint,
    descriptionHash: string
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    pType: bigint;
    descriptionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStateChangedEvent {
  export type InputTuple = [id: BigNumberish, newState: BigNumberish];
  export type OutputTuple = [id: bigint, newState: bigint];
  export interface OutputObject {
    id: bigint;
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    vote: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    vote: bigint,
    weight: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    vote: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RayanChainDAO extends BaseContract {
  connect(runner?: ContractRunner | null): RayanChainDAO;
  waitForDeployment(): Promise<this>;

  interface: RayanChainDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_RISK_SCORE: TypedContractMethod<[], [bigint], "view">;

  accControl: TypedContractMethod<[], [string], "view">;

  approvalThresholdPercentage: TypedContractMethod<[], [bigint], "view">;

  createFundingProposal: TypedContractMethod<
    [
      _descriptionHash: BytesLike,
      _recipient: AddressLike,
      _milestoneAmounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  createTreasuryActionProposal: TypedContractMethod<
    [
      _descriptionHash: BytesLike,
      _recipient: AddressLike,
      _amount: BigNumberish,
      _tokenType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [_proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  financeContract: TypedContractMethod<[], [string], "view">;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  nextProposalId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  participationScores: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        pType: bigint;
        proposer: string;
        descriptionHash: string;
        recipient: string;
        amount: bigint;
        tokenType: bigint;
        creationTime: bigint;
        votingDeadline: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        state: bigint;
        executed: boolean;
        currentMilestoneIndex: bigint;
        aiRiskScore: bigint;
        requiredApprovalThreshold: bigint;
      }
    ],
    "view"
  >;

  quorumPercentage: TypedContractMethod<[], [bigint], "view">;

  releaseNextMilestone: TypedContractMethod<
    [_proposalId: BigNumberish, _proofHash: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setStartupAccessTokenAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  stakingContract: TypedContractMethod<[], [string], "view">;

  startupAccessTokenAddress: TypedContractMethod<[], [string], "view">;

  tallyVotes: TypedContractMethod<
    [_proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateParticipationScore: TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProposalRiskScore: TypedContractMethod<
    [_proposalId: BigNumberish, _riskScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_proposalId: BigNumberish, _voteType: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_RISK_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accControl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approvalThresholdPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createFundingProposal"
  ): TypedContractMethod<
    [
      _descriptionHash: BytesLike,
      _recipient: AddressLike,
      _milestoneAmounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTreasuryActionProposal"
  ): TypedContractMethod<
    [
      _descriptionHash: BytesLike,
      _recipient: AddressLike,
      _amount: BigNumberish,
      _tokenType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "financeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participationScores"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        pType: bigint;
        proposer: string;
        descriptionHash: string;
        recipient: string;
        amount: bigint;
        tokenType: bigint;
        creationTime: bigint;
        votingDeadline: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        state: bigint;
        executed: boolean;
        currentMilestoneIndex: bigint;
        aiRiskScore: bigint;
        requiredApprovalThreshold: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quorumPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseNextMilestone"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, _proofHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStartupAccessTokenAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startupAccessTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tallyVotes"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateParticipationScore"
  ): TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProposalRiskScore"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, _riskScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, _voteType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "MilestoneReleased"
  ): TypedContractEvent<
    MilestoneReleasedEvent.InputTuple,
    MilestoneReleasedEvent.OutputTuple,
    MilestoneReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ParticipationScoreUpdated"
  ): TypedContractEvent<
    ParticipationScoreUpdatedEvent.InputTuple,
    ParticipationScoreUpdatedEvent.OutputTuple,
    ParticipationScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStateChanged"
  ): TypedContractEvent<
    ProposalStateChangedEvent.InputTuple,
    ProposalStateChangedEvent.OutputTuple,
    ProposalStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "MilestoneReleased(uint256,uint256,uint256)": TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;
    MilestoneReleased: TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ParticipationScoreUpdated(address,uint256)": TypedContractEvent<
      ParticipationScoreUpdatedEvent.InputTuple,
      ParticipationScoreUpdatedEvent.OutputTuple,
      ParticipationScoreUpdatedEvent.OutputObject
    >;
    ParticipationScoreUpdated: TypedContractEvent<
      ParticipationScoreUpdatedEvent.InputTuple,
      ParticipationScoreUpdatedEvent.OutputTuple,
      ParticipationScoreUpdatedEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,uint8,bytes32)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalStateChanged(uint256,uint8)": TypedContractEvent<
      ProposalStateChangedEvent.InputTuple,
      ProposalStateChangedEvent.OutputTuple,
      ProposalStateChangedEvent.OutputObject
    >;
    ProposalStateChanged: TypedContractEvent<
      ProposalStateChangedEvent.InputTuple,
      ProposalStateChangedEvent.OutputTuple,
      ProposalStateChangedEvent.OutputObject
    >;

    "Voted(uint256,address,uint8,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
