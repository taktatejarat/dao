/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FinanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "daoAddress"
      | "investments"
      | "owner"
      | "platformFeeBps"
      | "registerInvestment"
      | "releaseFunds"
      | "releaseNextMilestone"
      | "renounceOwnership"
      | "setDaoAddress"
      | "token"
      | "transferOwnership"
      | "withdraw"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DaoAddressSet"
      | "FundsDeposited"
      | "FundsReleased"
      | "InvestmentCancelled"
      | "InvestmentRegistered"
      | "MilestoneReleased"
      | "NativeFundsWithdrawn"
      | "OwnershipTransferred"
      | "PlatformFeeTaken"
      | "TokenFundsWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerInvestment",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseNextMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseNextMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace DaoAddressSetEvent {
  export type InputTuple = [newDaoAddress: AddressLike];
  export type OutputTuple = [newDaoAddress: string];
  export interface OutputObject {
    newDaoAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentCancelledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentRegisteredEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    recipient: AddressLike,
    totalAmount: BigNumberish,
    milestoneCount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    recipient: string,
    totalAmount: bigint,
    milestoneCount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    recipient: string;
    totalAmount: bigint;
    milestoneCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneReleasedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    amount: BigNumberish,
    milestoneNumber: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    amount: bigint,
    milestoneNumber: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    amount: bigint;
    milestoneNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeFundsWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeTakenEvent {
  export type InputTuple = [proposalId: BigNumberish, feeAmount: BigNumberish];
  export type OutputTuple = [proposalId: bigint, feeAmount: bigint];
  export interface OutputObject {
    proposalId: bigint;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenFundsWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Finance extends BaseContract {
  connect(runner?: ContractRunner | null): Finance;
  waitForDeployment(): Promise<this>;

  interface: FinanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  daoAddress: TypedContractMethod<[], [string], "view">;

  investments: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        recipient: string;
        totalAmount: bigint;
        releasedAmount: bigint;
        milestoneCount: bigint;
        currentMilestone: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  registerInvestment: TypedContractMethod<
    [
      _proposalId: BigNumberish,
      _recipient: AddressLike,
      _totalAmount: BigNumberish,
      _milestoneCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  releaseFunds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "view"
  >;

  releaseNextMilestone: TypedContractMethod<
    [_proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDaoAddress: TypedContractMethod<
    [_daoAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "daoAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "investments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        recipient: string;
        totalAmount: bigint;
        releasedAmount: bigint;
        milestoneCount: bigint;
        currentMilestone: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerInvestment"
  ): TypedContractMethod<
    [
      _proposalId: BigNumberish,
      _recipient: AddressLike,
      _totalAmount: BigNumberish,
      _milestoneCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseFunds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "releaseNextMilestone"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDaoAddress"
  ): TypedContractMethod<[_daoAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DaoAddressSet"
  ): TypedContractEvent<
    DaoAddressSetEvent.InputTuple,
    DaoAddressSetEvent.OutputTuple,
    DaoAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentCancelled"
  ): TypedContractEvent<
    InvestmentCancelledEvent.InputTuple,
    InvestmentCancelledEvent.OutputTuple,
    InvestmentCancelledEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentRegistered"
  ): TypedContractEvent<
    InvestmentRegisteredEvent.InputTuple,
    InvestmentRegisteredEvent.OutputTuple,
    InvestmentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneReleased"
  ): TypedContractEvent<
    MilestoneReleasedEvent.InputTuple,
    MilestoneReleasedEvent.OutputTuple,
    MilestoneReleasedEvent.OutputObject
  >;
  getEvent(
    key: "NativeFundsWithdrawn"
  ): TypedContractEvent<
    NativeFundsWithdrawnEvent.InputTuple,
    NativeFundsWithdrawnEvent.OutputTuple,
    NativeFundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeTaken"
  ): TypedContractEvent<
    PlatformFeeTakenEvent.InputTuple,
    PlatformFeeTakenEvent.OutputTuple,
    PlatformFeeTakenEvent.OutputObject
  >;
  getEvent(
    key: "TokenFundsWithdrawn"
  ): TypedContractEvent<
    TokenFundsWithdrawnEvent.InputTuple,
    TokenFundsWithdrawnEvent.OutputTuple,
    TokenFundsWithdrawnEvent.OutputObject
  >;

  filters: {
    "DaoAddressSet(address)": TypedContractEvent<
      DaoAddressSetEvent.InputTuple,
      DaoAddressSetEvent.OutputTuple,
      DaoAddressSetEvent.OutputObject
    >;
    DaoAddressSet: TypedContractEvent<
      DaoAddressSetEvent.InputTuple,
      DaoAddressSetEvent.OutputTuple,
      DaoAddressSetEvent.OutputObject
    >;

    "FundsDeposited(address,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsReleased(address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "InvestmentCancelled(uint256)": TypedContractEvent<
      InvestmentCancelledEvent.InputTuple,
      InvestmentCancelledEvent.OutputTuple,
      InvestmentCancelledEvent.OutputObject
    >;
    InvestmentCancelled: TypedContractEvent<
      InvestmentCancelledEvent.InputTuple,
      InvestmentCancelledEvent.OutputTuple,
      InvestmentCancelledEvent.OutputObject
    >;

    "InvestmentRegistered(uint256,address,uint256,uint8)": TypedContractEvent<
      InvestmentRegisteredEvent.InputTuple,
      InvestmentRegisteredEvent.OutputTuple,
      InvestmentRegisteredEvent.OutputObject
    >;
    InvestmentRegistered: TypedContractEvent<
      InvestmentRegisteredEvent.InputTuple,
      InvestmentRegisteredEvent.OutputTuple,
      InvestmentRegisteredEvent.OutputObject
    >;

    "MilestoneReleased(uint256,uint256,uint8)": TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;
    MilestoneReleased: TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;

    "NativeFundsWithdrawn(address,uint256)": TypedContractEvent<
      NativeFundsWithdrawnEvent.InputTuple,
      NativeFundsWithdrawnEvent.OutputTuple,
      NativeFundsWithdrawnEvent.OutputObject
    >;
    NativeFundsWithdrawn: TypedContractEvent<
      NativeFundsWithdrawnEvent.InputTuple,
      NativeFundsWithdrawnEvent.OutputTuple,
      NativeFundsWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeTaken(uint256,uint256)": TypedContractEvent<
      PlatformFeeTakenEvent.InputTuple,
      PlatformFeeTakenEvent.OutputTuple,
      PlatformFeeTakenEvent.OutputObject
    >;
    PlatformFeeTaken: TypedContractEvent<
      PlatformFeeTakenEvent.InputTuple,
      PlatformFeeTakenEvent.OutputTuple,
      PlatformFeeTakenEvent.OutputObject
    >;

    "TokenFundsWithdrawn(address,uint256)": TypedContractEvent<
      TokenFundsWithdrawnEvent.InputTuple,
      TokenFundsWithdrawnEvent.OutputTuple,
      TokenFundsWithdrawnEvent.OutputObject
    >;
    TokenFundsWithdrawn: TypedContractEvent<
      TokenFundsWithdrawnEvent.InputTuple,
      TokenFundsWithdrawnEvent.OutputTuple,
      TokenFundsWithdrawnEvent.OutputObject
    >;
  };
}
